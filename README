README
1.For this project, I used Ubuntu 12.04. 

2. The preemptive scheduler I used was based on round robin. I basically kept a linked list of all the threads that are currently running. I used a mix of singals and timers to ensure that I could enforce a preemptive scheduler. Basically, a singal is set with the time that is stated when the library is initialized. This timer will thus go off at that time interval. The signal it will create is a SIGPROF singal. I created a signal action handler for responding to this. This handler simply calls the function that is used to change contexts. This this acheives the change in context. I then reset the signal and wait for the next timer to go off. 
I choose which thread to go next based on the linked list. Basically I keep a pointer to the currently running thread on the linked list, and when the signal alerts, I choose the item that is next on the linked list. This allows the threads to go serially in order, and no thread to get more time than any of the others. 
Sometimes a thread may not be able to do any more work or just needs to yield. To be able to hand this, a thread has two options. It can either raise the SIGPROF signal, which will automatically go to the change context function to change the context, or it can just call the change context function. Thus this will yield the time on the processor and the thread can get it back when the round robin gets back to that thread. 

3.
COMPILING LIBRARY: make
COMPILING PROGRAM: gcc -Wall -pedantic -I{...} -o philosophers philosophers.c gtthread.a

4.
The biggest issue with the dining philiosophers is the deadlock that can happen if each philosoper has exactly one utensil. They will all be waiting on each other. The traditional solution, adn the one that I implemented, was that I had one philosopher operate differntly than the rest. For 4 of the 5 philosophers, I had them pick up the left chopstick first. However, for the last philosopher, I had him pick up the right one first. This ensures taht the situation where every philosopher has 1 chopstick can never happen. If this can not happen, this means that there are 5 chopsticks for 4 people, meaning that there can not be a deadlock. Thus the problem is solved. 

5. 
I was wanting to implement a linked list for the threads currently running. However, I found some issues with this. The primary is issues with memory. I could not figure out how to clear all the memory after the main thread exits. This could cause major memory leaks, and I did not want this. Thus I ended up implementing a mixture of a linked list and an array. Basically I create an array at creation that is basically made up of threads. I slowly distribute these threads to the program as it needs it. 
I also struggled coming up with a good implementation of join. Ideally I would want the ending thread to alert the parent thread that it is finished. But I could not figure out how to do this in a manner that would maintain the round robin method of scheduling threads. 
